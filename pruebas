

ui
library(shiny)
library(rmarkdown)

packages <- c('shiny','rmarkdown')

for (package in packages) {
  if (!(require(package, character.only=T, quietly=T))) {
    install.packages(package)
    library(package, character.only=T)
  }
}

rm(package,packages)

shinyUI
(
  pageWithSidebar
  (
      headerPanel
      (windowTitle = "Benchmark", imageOutput("imageLogo", height = 60)), 
      sidebarPanel
      (
          fileInput('file1', 'Seleccione el archivo txt - delimitado por tab - con scores calculados',
                  accept=c('text/csv', 'text/comma-separated-values,text/plain'))
          , hr()
          , selectInput('response', 'Marca desemp',"")
          , selectInput('partition', 'Variable de segmentacion',"")
          , selectInput('partitionCat', 'Segmento',"")
          , hr()  
      ),
      mainPanel
      (
        tabsetPanel(
          tabPanel("Resultados globales"
                   , h3("Benchmark de scores: ")
                   , dataTableOutput("bench")
                   , br()
                  # ,verbatimTextOutput('values')
                   , hr()
                   , h3(textOutput('resOut'))
                   , plotOutput("densityM")
                   , br()
                   , br()
                   , value = 1
                   ),
          tabPanel("Resultados por modelo"
                  , h3(textOutput('scoOut'))
                  , fluidRow
                    (
                        column(8,plotOutput("graficos"))
                      , column(4,selectInput('score', 'Modelo', "")
                      , selectInput(  "plot"
                                    , "Tipo de gráfico:"
                                    , c("Densidad" = "DENSITY", "KS" = "KS", "ROC" = "ROC", "Ganancias" ="GAIN", "IC" = "SMOOTH",
                                      "Deciles" = "DECILE", "Quintiles" = "QUINTILE", "Histograma" = "HISTOGRAM")
                                    )
                      , radioButtons('format', 'Descargar vista actual', c('HTML',"Word"), inline = TRUE)
                      , downloadButton('downloadReport'))
                    )
                 , hr()
                 , h3('Estadísticas del modelo')
                 , dataTableOutput("benchSco")
                 , hr()
                 , h3(textOutput("oddsTitle"))
                 , dataTableOutput("odds")
                 , br()
                 , br()
                 , value = 2
                 ),
           tabPanel("Resultados Poblacion Total"
                    , h3("Benchmark de scores: ")
                    #, dataTableOutput("bench_p")
                    #, br()
                    #                   ,verbatimTextOutput('values')
                    #, hr()
                    #, h3(textOutput('resOut'))
                    #, plotOutput("densityM")
                    #, br()
#                    , br()
                    , value = 3
           ),
           tabPanel("Resultados por modelo Poblacion Total"
                   , h3(textOutput('scoOut2'))
                   , fluidRow
                    (
                      column(8,plotOutput("graficos_p"))
                      , column(4,selectInput('score2', 'Modelo', "")
                               , selectInput(  "plot2"
                                               , "Tipo de gráfico:"
                                               , c("Densidad" = "DENSITY", "KS" = "KS", "ROC" = "ROC", "Ganancias" ="GAIN", "IC" = "SMOOTH",
                                                   "Deciles" = "DECILE", "Quintiles" = "QUINTILE", "Histograma" = "HISTOGRAM")
                               )
                               , radioButtons('format2', 'Descargar vista actual', c('HTML',"Word"), inline = TRUE)
                               , downloadButton('downloadReport2'))
                    )
                    , hr()
                    , h3('Estadísticas del modelo')
                    #, dataTableOutput("benchSco_p")
                    , hr()
                    , h3(textOutput("oddsTitle_p"))
                    , dataTableOutput("odds_p")
                    , br()
                    , br()
                    , value = 4
           )   ,
            tabPanel("About", includeMarkdown("about.md"), value = 3)
                  )
      )
  )
)



#     tags$head(tags$style(type="text/css",
#                          "label.radio { display: inline-block; margin:0 10 0 0;  }",
#                          ".radio input[type=\"radio\"] { float: none; }")),

#     plotOutput("imageLogo")

#c('HTML', 'PDF', 'Word')


#tabPanel("Estadisticas de la base",
#         plotOutput("periodoP"),
#         value = 3),




server

packages <- c('plyr','shiny','rmarkdown')

for (package in packages) {
  if (!(require(package, character.only=T, quietly=T))) {
    install.packages(package)
    library(package, character.only=T)
  }
}

rm(package,packages)
library(shiny)
library(rmarkdown)

source("BENCH_FUN.R")
options(shiny.maxRequestSize=30*1024^2)

shinyServer(function(input, output, session) {
  
  ########################################################################
  # CARGA EL ARCHIVO DE ANALISIS
  ########################################################################
  Data1 <- reactive({
    inFile <- input$file1
    if (is.null(inFile))
      return(NULL)
    df.raw <- read.table(inFile$datapath, header=T, sep="\t", stringsAsFactors = F)
    return(df.raw)
  })
   
  
  
  ########################################################################
  # DEFINE LAS OPCIONES DE SELECCION
  ########################################################################
  #Actualiza lista para seleccionar las marcas
  outResponse = reactive({
    d <- Data1()
    sort(StringsWith(names(d),"^GB"))
  })
  observe({
    updateSelectInput(session, "response",
                      choices = outResponse()
    )})
  
 
    #Actualiza lista para seleccionar los score
  outScore = reactive({
    d <- Data1()
    sort(StringsWith(names(d),"^SCORE"))
  })
  observe({
    updateSelectInput(session, "score",
                      choices = outScore()
    )})
  
  outScore2 = reactive({
    d <- Data1()
    sort(StringsWith(names(d),"^SCORE"))
  })
  observe({
    updateSelectInput(session, "score2",
                      choices = outScore2()
    )})
  
  #Actualiza lista para seleccionar las variables de particion
  outPartition = reactive({
    d <- Data1()
    c(" - ",sort(StringsWith(names(d),"^SEG")))
  })
  observe({
    updateSelectInput(session, "partition",
                      choices = outPartition()
    )})
  
  
  outPartVar = reactive({
    if(input$partition != " - "){
      c(" - ",sort(unique(Data1()[[input$partition]])))
    }
  })
  observe({
    updateSelectInput(session, "partitionCat",
                      choices = outPartVar()
    )})

  outPartVar2 = reactive({
    if(input$partition == " - "){
      c(" - ")
    }
  })
  observe({
    updateSelectInput(session, "partitionCat",
                      choices = outPartVar2()
    )})
  
  output$values <- renderPrint({
    list(x1 = input$response,x2=input$score,x3=input$partition,x4=input$partitionCat)
  })
  
  Data <- reactive({
   
    DF<-Data1()
    
    DF[is.na(DF)] <- 0
    
    DF[,input$response]<-recode(DF[,input$response],"0=1;1=0")  
    
    DF <- DF[DF[,input$response]<=1 & DF[,input$score]>0,]
    
    return(DF)
  })
  
  Datos <- reactive({
    responses = input$response
    DF<-Data1()
    DF[is.na(DF)] <- 0
    DF[,input$response]<-recode(DF[,input$response],"0=1;1=0")    
    DF <- DF[DF[,responses]<=4 & DF[,input$score2]>0,]

    return(DF)
  })
  

  ########################################################################
  # MUESTRA EL RESULTADO DEL BENCHMARK
  ########################################################################
  output$bench <- renderDataTable(
    {ScoreBenchmark(Data(),responses = input$response,
                   scores = StringsWith(names(Data()),"^SCORE"),
                   split.var = input$partition)
    },
    options = list(pageLength = 10,paging = FALSE,
                   searching=F)
  )
  
  ########################################################################
  # MUESTRA EL RESULTADO DEL BENCHMARK SEGUN OPCIONES ELEGIDAS
  ########################################################################
  output$benchSco <- renderDataTable(
    {ScoreBenchmark(Data(),responses = input$response,scores = input$score,split.var = input$partition)
     },
    options = list(searching = FALSE,paging = FALSE,info=0)
  )

  output$benchSco_p <- renderDataTable(
    {ScoreBenchmark(Data(),responses = input$response,scores = input$score,split.var = input$partition)
    },
    options = list(searching = FALSE,paging = FALSE,info=0)
  )
  
  
  ########################################################################
  # GRAFICA SEGUN LA SELECCION DE TIPO DE GRAFICO
  ########################################################################
  output$graficos <- renderPlot({
      
      if(input$partitionCat == " - "){ 
        data = Data()
        #titulo = labs(title = paste0("Modelo : ",input$score,"\n", "Marca: ",input$response,"\n"))
        titulo = labs(title = paste0(" Resultado con marca desemp: ",input$response,"\n"))
      }
      if(input$partitionCat !=" - "){ 
        data = subset(Data(), subset=Data()[[input$partition]] == input$partitionCat)
        titulo = labs(title = paste0("Modelo : ",input$score," Marca: ",input$response,"\n",
                                     "Segmento: ",input$partition, " = ",input$partitionCat,
                                     "\n"))
      }  
      
      plotFunction(data,input$score,input$response,input$plot) + 
        titulo +
        theme(plot.title=element_text(lineheight=.8,face="bold"))
      
  })
  
  
  output$graficos_p <- renderPlot({
    
    if(input$partitionCat == " - "){ 
      data = Data()
      #titulo = labs(title = paste0("Modelo : ",input$score,"\n", "Marca: ",input$response,"\n"))
      titulo = labs(title = paste0(" Resultado con marca desemp: ",input$response,"\n"))
    }
    if(input$partitionCat !=" - "){ 
      data = subset(Data(), subset=Data()[[input$partition]] == input$partitionCat)
      titulo = labs(title = paste0("Modelo : ",input$score2," Marca: ",input$response,"\n",
                                   "Segmento: ",input$partition, " = ",input$partitionCat,
                                   "\n"))
    }  
    
    plotFunction(data,input$score2,input$response,input$plot) + 
      titulo +
      theme(plot.title=element_text(lineheight=.8,face="bold"))
    
  })
  
  
  ########################################################################
  # GRAFICA DENSIDAD PARA TODOS LOS SCORE SEGUN MARCA
  ########################################################################
  
  output$densityM <- renderPlot({

    if(input$partitionCat == " - "){ 
      data = Data()
    }
    if(input$partitionCat !=" - "){ 
      data = subset(Data(), subset=Data()[[input$partition]] == input$partitionCat)
    }
    
    DistChartM(data,input$response) 
  })
  
  ########################################################################
  # GRAFICA PERIODOS Y TASA DE MALOS SEGUN MARCA
  ########################################################################
  output$periodoP <- renderPlot({
    if(input$partitionCat == " - "){ 
      data = Data()
      titulo = labs(title = paste0("Tasa de malos por período","\n"," Marca: ",input$response,"\n"))
    }
    if(input$partitionCat !=" - "){ 
      data = subset(Data(), subset=Data()[[input$partition]] == input$partitionCat)
      titulo = labs(title = paste0("Tasa de malos por período","\n"," Marca: ",
                                   input$response," - Segmento: ",input$partition, " = ",input$partitionCat,
                                   "\n"))
    }
    
    BRChart(as.factor(data$PERIODO),data[[input$response]]) + 
      titulo+
      theme(plot.title=element_text(lineheight=.8,face="bold"))+ 
      theme(axis.text.x=element_text(angle=90,hjust = 1))
    
  })
  
  ########################################################################
  # TABLA DE ODDS SEGUN OPCIONES ELEGIDAS
  ########################################################################
  
  output$odds <- renderDataTable(
    
     {if(input$partitionCat == " - "){data = Data()}
      if(input$partitionCat !=" - "){data = subset(Data(), subset=Data()[[input$partition]] == input$partitionCat)}
    
    OddsTable(score = data[[input$score]],data[[input$response]])
    },
    options = list(searching = FALSE,paging = FALSE,info=0)
  )
  
  output$odds_p <- renderDataTable(
    
    {if(input$partitionCat == " - "){data = Datos()}
      if(input$partitionCat !=" - "){data = subset(Datos(), subset=Datos()[,input$partition] == input$partitionCat)}
      
      score <- data[,input$score2]
      
      good.label <- data[,input$response]
      
      OddsTable_p(score ,good.label)
    },
    options = list(searching = FALSE,paging = FALSE,info=0)
  )
  
  
  ########################################################################
  # INDICA MARCA ELEGIDA GRAFICO DENSIDAD MULTIPLE SCORES
  ########################################################################
  output$resOut <- renderText(
    {
      
      {if(input$partitionCat == " - "){titulo = paste0("Densidad de score - Marca: ",input$response)}
      if(input$partitionCat != " - "){titulo = paste0("Densidad de score - Marca: ",input$response," Segmento: ", input$partition, " = ",input$partitionCat )}
      titulo}
      
    }
    )
  ########################################################################
  # INDICA RESULTADOS MODELO ELEGIDO
  ########################################################################
  output$scoOut <- renderText(
    paste0("",input$score)
  )

  output$scoOut2 <- renderText(
    paste0("",input$score2)
  )
  
  ########################################################################
  # INDICA TITULO TABLA ODDS SEGUN OPCIONES
  ########################################################################
  output$oddsTitle <- renderText(
    {if(input$partitionCat == " - "){ 
     titulo =  paste0("Tabla de Odds")
    }
    if(input$partitionCat != " - "){ 
      titulo =  paste0("Tabla de Odds - Segmento: ",input$partition, " = ", input$partitionCat)
    }
    
    titulo}
  )
  
  output$oddsTitle_p <- renderText(
    {if(input$partitionCat == " - "){ 
      titulo =  paste0("Tabla de Odds")
    }
      if(input$partitionCat != " - "){ 
        titulo =  paste0("Tabla de Odds - Segmento: ",input$partition, " = ", input$partitionCat)
      }
      
      titulo}
  )
  
  ########################################################################
  # PRUEBA DESCARGA
  ########################################################################
  
  output$downloadReport <- downloadHandler(
    filename = function() {
      if(input$partitionCat == " - "){ 
        nombre = paste0(input$score,"_",input$response)
      }
      if(input$partitionCat !=" - "){ 
        nombre = paste0(input$score,"_",input$response,"_",input$partition,"_",input$partitionCat)
      }
      
      
      paste(nombre, sep = '.', switch(
        input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
      ))
    },
    
    content = function(file) {
      src <- normalizePath('report.Rmd')
      
      # temporarily switch to the temp dir, in case you do not have write
      # permission to the current working directory
      owd <- setwd(tempdir())
      on.exit(setwd(owd))
      file.copy(src, 'report.Rmd')
      
      out <- render('report.Rmd', switch(
        input$format,
        PDF = pdf_document(), HTML = html_document(), Word = word_document()
#         PDF = knit2pdf(), HTML = html_document(), Word = word_document()
      ))
      file.rename(out, file)
    }
  )
  
  ########################################################################
  # IMAGEN ENCABEZADO
  ########################################################################
  output$imageLogo <- renderImage({list(
    src = "images/Logo.png",
    filetype = "image/png",
    alt = "This is a chainring"
  )}, deleteFile = FALSE)
  
  ########################################################################
  # PRUEBA DESCARGA 2
  ########################################################################
  
  output$downloadPdf <- reactive(function() {
  createPdf <- function() {
    temp <- tempfile(fileext=".pdf")
    pdf(file=temp, height=8, width=11)
    
    print('resOut',position=c(0,0.6,0.6,1),more=TRUE)
    #print(returns$bar,position=c(0,0,0.6,0.6),more=TRUE)
#     print(risk$drawdown,position=c(0,0,0.6,0.6),more=TRUE)
#     #print(risk$drawdown,position=c(0.6,0,1,1))
#     print(returns$bar,position=c(0.6,0,1,1))    

    dev.off()
    
    return(temp)
  }
  
  pdffile <- createPdf()
  
  
  b64 <- base64encode(readBin(pdffile, what=raw(),n=file.info(pdffile)$size))
  return(paste("data:application/pdf;base64,", b64, sep=''))
  #delete file now that we are done
  unlink(pdffile)
  
  
  })
  
})

benc

rm(list=ls())


#libraries
packages <- c('ggplot2','ROCR','scales','gtools','plyr','shiny',
              'grid','gridExtra','stringr','knitr','rmarkdown','yaml')

for (package in packages) {
  if (!(require(package, character.only=T, quietly=T))) {
    install.packages(package)
    library(package, character.only=T)
  }
}

rm(package,packages)

library()
library(ggplot2)
library(ROCR)
library(scales)
library(gtools)
library(plyr)
library(shiny)
library(grid)
library(gridExtra)
library(stringr)
library(knitr)
library(rmarkdown)
library(yaml)




#functions

#string functions
StringsWith <- function(strings, patterns, complement = F){
  # From a vector of string, return the string which have the pattern.
  # If complement is T, return the string which not have the pattern.
  if(!complement){
    for(pattern in patterns){
      strings <- strings[(1:length(strings) %in% grep(x=strings, pattern=pattern))]
    }
  } else {
    for(pattern in patterns){
      strings <- strings[!(1:length(strings) %in% grep(x=strings, pattern=pattern))]
    }
  }
  strings
}

PrettyLevels <- function(levels){
  
  laply(levels, function(aux){
    liminf <- substring(aux,1,1)
    limsup <- substring(aux,nchar(aux),nchar(aux))
    nums <- as.numeric(unlist(strsplit(substring(aux, 2, nchar(aux) - 1 ), ",")))
    n1 <- prettyNum(format(nums[1],scientific=F), big.mark = ".")
    n2 <- prettyNum(format(nums[2],scientific=F), big.mark = ".")
    paste(liminf, paste(n1,n2, sep = ",")  ,limsup, sep = "")
  })
  
}

str_capitalize <- function(strings){
  laply(strings, function(x){
    x <- tolower(x)
    x <- str_split(x, " ")
    paste(laply(x, str_first_upper), collapse=" ")
  })
}

str_first_upper <- function(characters){
  paste(toupper(substring(characters, 1, 1)),substring(characters, 2, nchar(characters)), sep = "")
}

#scalar functions
KS <- function(score, good.label){
  library(ROCR)
  pred <- prediction(score,good.label)
  perf <- performance(pred,"tpr","fpr")
  KS <- max(abs(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]]))
  return(c(KS = as.numeric(KS)))
}

AUCROC <- function(score, good.label){
  library(ROCR)
  pred <- prediction(score,good.label)
  perf <- performance(pred,"tpr","fpr")
  auc <- attr(performance(pred,"auc"),"y.values")[[1]]
  return(c(AUCROC = auc ))
}

Gini <- function(score, good.label){
  return( c(GINI = 2*as.numeric(AUCROC(score, good.label)) - 1))
}

Gain <- function(score, good.label, percents = c(0.10, 0.20, 0.30, 0.40, 0.50)){
  g <- ecdf(score[good.label==0])(quantile(score,percents))
  names(g) <- percent(percents)
  g
}

#frame functions
perc <- function(x,dec=2){
  return(round(x*100,dec))
}

SummaryScorecard <- function(score,good.label){ 
  
  if(!is.numeric(good.label)) good.label <- as.numeric(good.label)-1
  
  res <- c(N = length(score),
           N.good = length(score[good.label == 1]),
           N.bad = length(score[good.label == 0]),
           BR = length(score[good.label == 0])/length(score),
           KS(score,good.label),
           AUCROC(score,good.label),
           Gini(score,good.label),
           #Divergence(score,good.label),
           Gain = Gain(score,good.label))
  data.frame(t(res))
}

ScoreBenchmark <- function(data, responses, scores, split.var = " - "){
#   if(!missing(split.var) | split.var != "None"){  
  if(split.var != " - "){  
    bench <- 
      ldply(responses, function(response){
        ldply(scores, function(score){
          ldply(sort(as.character(unique(data[[split.var]]))), function(cat){
            daux <- data[data[[split.var]] == cat, ]
            cbind(RESPONSE = response, SCORE = score, cat, SummaryScorecard(daux[[score]],daux[[response]]))
          })
        })
      })
    
    names(bench)[3] <- split.var
    
  } else {
    bench <- 
      ldply(responses, function(response){
        ldply(scores, function(score){
          cbind(RESPONSE = response, SCORE = score, SummaryScorecard(data[[score]],data[[response]]))
        })
      })    
  }
    
  for(var in names(bench)[(ncol(bench)-8):ncol(bench)]){  
    bench[[var]] <- perc(bench[[var]])
  }
  bench
}

OddsTable <- function(score, good.label, min = min(score), max = max(score), cuts = NULL, nclass = 10, round = 0, quantile = T, format.2 = T){
  if(missing(cuts) & quantile){
    cuts <- unique(round(quantile(score, seq( 0, 1, length = nclass + 1)), digits=round))
  } 
  if(missing(cuts) & !quantile) {
    cuts <- unique(round(seq( from = min, to = max, length = nclass + 1), digits=round))
  }
  
  t <- table(cut(score, cuts, include.lowest=T), good.label)
  t <- t[(length(cuts)-1):1,]
  nclass <- dim(t)[1]
  N <- sum(t)
  t2 <- data.frame(class  = row.names(t),
                   n      = (t[,1]+t[,2]),
                   p      = (t[,1]+t[,2])/N,
                   p_acum = cumsum((t[,1]+t[,2])/N),
                   p_desacum  = c(1,((sum(t[,1]+t[,2])-cumsum(t[,1]+t[,2]))/N)[1:(nclass-1)]),
                   n_bad  = t[,1],
                   p_bad  = t[,1]/sum(t[,1]),
                   p_bad_acum = cumsum(t[,1]/sum(t[,1])),
                   p_bad_desacum = c(1,((sum(t[,1])-cumsum(t[,1]))/sum(t[,1]))[1:(nclass-1)]),
                   br     = t[,1]/(t[,1]+t[,2]),
                   br_acum= cumsum(t[,1])/cumsum((t[,1]+t[,2])),
                   br_desacum = c((cumsum(t[,1])/cumsum((t[,1]+t[,2])))[nclass],((sum(t[,1])-cumsum(t[,1]))/(sum(t[,1]+t[,2])-cumsum(t[,1]+t[,2])))[1:(nclass-1)]),
                   odds   =  t[,2]/ t[,1])
  rownames(t2) <- NULL
  
  #min <- min(score)
  #max <- max(score)
  
  if(format.2) t2$class <- paste(c(1,cuts[2:(nclass)]+1),c(cuts[2:nclass],999), sep = "-")[nclass:1]
  
#   list(oddstable = t2, cuts = cuts)

for(var in c(names(t2)[3:5],names(t2)[7:(ncol(t2)-1)])){  
  t2[[var]] <- perc(t2[[var]])
}

t2[,ncol(t2)] <- round(t2[,ncol(t2)],2)

t2

}


OddsTable_p <- function(score, good.label, min = min(score), max = max(score), cuts = NULL, 
                        nclass = 10, round = 0, quantile = T, format.2 = T){
  
  if(missing(cuts) & quantile){
    cuts <- unique(round(quantile(score, seq( 0, 1, length = nclass + 1)), digits=round))
  } 
  if(missing(cuts) & !quantile) {
    cuts <- unique(round(seq( from = min, to = max, length = nclass + 1), digits=round))
  }
  
  
  t <- table(cut(score, cuts, include.lowest=T), good.label)
  t <- t[(length(cuts)-1):1,]
  
  nclass <- dim(t)[1]
  N <- sum(t)
  t2 <- data.frame(class  = row.names(t),
                   n      = (t[,1]+t[,2]+t[,3]+t[,4]+t[,5]),
                   p      = round(100*(t[,1]+t[,2]+t[,3]+t[,4]+t[,5])/N,0),
                   p_acum = round(100*cumsum((t[,1]+t[,2]+t[,3]+t[,4]+t[,5])/N),0),
                   p_desacum  = round(100*(c(1,((sum(t[,1]+t[,2]+t[,3]+t[,4]+t[,5])-cumsum(t[,1]+t[,2]+t[,3]+t[,4]+t[,5]))/N)[1:(nclass-1)])),0),
                   n_bad  = t[,1],
                   p_bad  = t[,1]/sum(t[,1]),
                   p_bad_acum = cumsum(t[,1]/sum(t[,1])),
                   p_bad_desacum = c(1,((sum(t[,1])-cumsum(t[,1]))/sum(t[,1]))[1:(nclass-1)]),
                   br     = t[,1]/(t[,1]+t[,2]),
                   br_acum= cumsum(t[,1])/cumsum((t[,1]+t[,2])),
                   br_desacum = c((cumsum(t[,1])/cumsum((t[,1]+t[,2])))[nclass],((sum(t[,1])-cumsum(t[,1]))/(sum(t[,1]+t[,2])-cumsum(t[,1]+t[,2])))[1:(nclass-1)]),
                   odds   =  t[,2]/ t[,1],
                   nb_p   =  round(((t[,1]/(t[,1]+t[,2]+t[,4]))*(t[,5]+t[,3]))+t[,1],0)
  )
  
  t2$n_bad <- t2$nb_p
  t2$p_bad <- t2$nb_p /sum(t2$nb_p)
  t2$p_bad_acum <- cumsum(t2$nb_p/sum(t2$nb_p))
  t2$p_bad_desacum <- c(1,((sum(t2$nb_p)-cumsum(t2$nb_p))/sum(t2$nb_p))[1:(nclass-1)])
  t2$br   <- t2$nb_p/t2$n
  t2$br_acum <- cumsum(t2$nb_p)/cumsum(t2$n)
  t2$br_desacum <- c((cumsum(t2$nb_p)/cumsum(t2$n))[nclass],((sum(t2$nb_p)-cumsum(t2$nb_p))/(sum(t2$n)-cumsum(t2$n)))[1:(nclass-1)])
  
  t2$odds <- (t2$n-t2$nb_p)/t2$nb_p
  
  t2$nb_p<-NULL
  
  #  rownames(t2) <- NULL
  
  #min <- min(score)
  #max <- max(score)
  
  if(format.2) t2$class <- paste(c(1,cuts[2:(nclass)]+1),c(cuts[2:nclass],999), sep = "-")[nclass:1]
  
  #   list(oddstable = t2, cuts = cuts)  /names(t2)[3:5],
  
  for(var in c(names(t2)[7:(ncol(t2)-1)])){  
    t2[[var]] <- perc(t2[[var]],dec=1)
  }
  
  t2[,ncol(t2)] <- round(t2[,ncol(t2)],1)
  
  t2
  
}

#plot functions
KSChart <- function(score, good.label, class = 500 , ...) {
  # 2012-09-07: Draw the segment where occurs the max separation
  ecd.bad <- ecdf(score[good.label == 0])
  ecd.good <- ecdf(score[good.label == 1])
  cuts <- round(seq(min(score), max(score), length.= class))
  
  df <- data.frame( score = c(cuts,cuts),
                    ecd = c(ecd.good(cuts),ecd.bad(cuts)),
                    Type = as.factor(rep( c("Good","Bad"), length = 2*length(cuts), each = length(cuts))))
  
  cut <- cuts[abs(ecd.good(cuts) - ecd.bad(cuts)) == max(abs(ecd.good(cuts) - ecd.bad(cuts)))]  
  
  p <- ggplot(df, aes(score, ecd, colour = Type))  + geom_line(size = 1.2) + labs(x = "Score", y = "ECDF")
  p <- p + scale_colour_manual(values=c("red","blue"))
  #p <- p + geom_segment(aes(x = x, y = y), colour = grey(.6), size = 1.0)
  p
}

DistChart <- function(score, good.label, ...) {
  Distribution <- as.factor(good.label)
  levels(Distribution) <- c("Bad","Good")
  daux <- data.frame(Score = score, Distribution)
  
  opts <- theme(legend.position = "bottom"
                , legend.text = element_text(size = 8, colour = "black")
                , legend.title = element_blank()
                #, axis.ticks = element_blank()
                , axis.text.x = element_text(face = "bold")
                , axis.title.x = element_text(face = "bold")
                , axis.text.y = element_text(face = "bold")
                , axis.title.y = element_text(face = "bold")
                #, plot.margin = unit(rep(0.5, 4), "lines")
                , title = element_text(size = 10)) 
  
  #p <- ggplot(daux, aes(Score, fill = Dist)) + geom_density(alpha = 0.60, size = 0.5) + labs(fill = "Dist")
  #p <- ggplot(daux, aes(Score, color = Distribution , fill = Distribution)) + geom_density(alpha = 0.50, color = NA) 
  p <- ggplot(daux, aes(Score, fill = Distribution)) + geom_density(alpha = 0.50, color = NA) 
  p <- p + theme_classic() + labs(x = "Score", y = "Density") + opts
  p <- p + scale_fill_manual(values = c("#d81390","#006EFF"))
  p  
}

SmoothChart <- function(variable, label, ...){
  daux <- data.frame(variable, label)
  p <- ggplot(daux, aes(variable,1-label))
  p <- p + scale_y_continuous("Proporcion de casos", labels = percent_format(), limits = c(0, 1), ...)
  p <- p + stat_smooth(fill = "red", colour = "darkred", size = 1.0, alpha = 0.25, se = T)
  p <- p + geom_point(aes(variable,label*0), shape = 20)
  p
}

ROCChart <- function(score, good.label, ...){
  pred <- prediction(score,good.label)
  perf <- performance(pred,"tpr","fpr")
  auc <- attr(performance(pred,"auc"),"y.values")[[1]]
  
  df <- data.frame(x = unlist(perf@"x.values") , y = unlist(perf@"y.values"))
  
  p <- ggplot(df, aes(x, y))  + geom_line(size = 1.2, colour = "darkred")
  p <- p + geom_path(data= data.frame(x = c(0,1), y = c(0,1)), colour = "gray", size = 0.7)
  p <- p + scale_x_continuous("False Positive Rate (1 - Specificity)", labels = percent_format(), limits = c(0, 1))
  p <- p + scale_y_continuous("True Positive Rate (Sensivity or Recall)", labels = percent_format(), limits = c(0, 1))
  p
}

BRChart <- function(variable, gb.label, n.cats = 10, br.size = 4,acum = F,...){
  
  #   variable <- CatVar(variable, n.cats=n.cats)
  
  daux <- ddply(data.frame(variable,gb = gb.label),.(variable), summarise,
                BadRate = (length(gb)-sum(gb))/length(gb),
                Percent = length(gb),
                bad = length(gb)-sum(gb))
  
  daux$Id <- 1:nrow(daux)
  daux$Percent <- daux$Percent/length(gb.label)
  daux$bad_acum <- cumsum(daux$bad)
  daux$Acum <- daux$bad_acum / sum(daux$bad)
  daux$bad <- NULL
  daux$bad_acum <- NULL
  daux$g <- 1
  
  t <- daux
  
  p <- ggplot(t,aes(x=variable,y=Percent,group=g)) +  geom_bar(stat="identity")
  p <- p + labs(x = paste("Categorias\n", "(n = ",prettyNum(length(variable), big.mark = "."), ")", sep = "" ), fill = NULL)
  p <- p + scale_y_continuous('Proporcion de casos', labels = percent_format() )
  p <- p + geom_line(aes(x = Id, y = BadRate), colour = "red", size = 1)
  p <- p + geom_point(aes(x = Id, y = BadRate), colour = "darkred", size = 3)
  p <- p + geom_text(aes(x = Id, y = BadRate, label = percent(BadRate)), colour = "red", size = br.size, hjust = 0, vjust = -.8)
  
  if(acum == T){
    p <- p + geom_line(aes(x = Id, y = Acum), colour = "orange", size = 1,hjust = 0, vjust = -2)
    p <- p + geom_point(aes(x = Id, y = Acum), colour = "darkorange", size = 3,hjust = 0, vjust = -2)
    p <- p + geom_text(aes(x = Id, y = Acum, label = percent(round(Acum,2))), colour = "darkorange", size = br.size, hjust = 0, vjust = -0.8)
    
  }
  
  p
}

GainChart <- function(score, good.label, n.breaks = 50, ...){
  
  df <- data.frame(percentiles = seq(0, 1, length = n.breaks),
                   gain = Gain(score, good.label, seq(0, 1, length = n.breaks)))
  
  p <-  ggplot(df, aes(percentiles, gain))  + geom_line(size = 1.2, colour = "darkred")
  p <- p + geom_line(aes(x = c(0,1), y = c(0,1)), colour = "gray", size = 0.7)
  p <- p + scale_x_continuous("Sample Percentiles", labels = percent_format(), limits = c(0, 1))
  p <- p + scale_y_continuous("Cumulative Percents of Bads", labels = percent_format(), limits = c(0, 1))
  p
}

#1E90FF
Histogram <- function(variable, count = T, color = "#006EFF",...){
  p <- qplot(variable, geom = "density")#"blank")
  if(count){
    p <- p + geom_histogram(aes(y = ..count..), fill = color, colour = "white", alpha=0.55,
                            binwidth=diff(range(variable))/30)
  } else {
    p <- p + geom_histogram(aes(y = ..density..), fill = color, colour = "white",
                            binwidth=diff(range(variable))/30) 
  }
  p + xlab(NULL) + ylab(NULL) 
}

DistChartM <- function(data,response,...){
  
  SCORES <- setdiff(StringsWith(names(data),"^SCORE"), StringsWith(names(data),"_SS$"))
  
  #?setdiff
  
  opts <- theme(legend.position = "bottom"
                , legend.text = element_text(size = 8, colour = "blue")
                , axis.ticks = element_blank()
                , axis.text.y = element_blank()
                , axis.title.y = element_blank()
                , plot.margin = unit(rep(0.5, 4), "lines")
                , title = element_text(size = 10)) 
  
  p <- do.call(arrangeGrob, lapply(SCORES, function(x){
    DistChart(data[[x]], data[[response]]) + ggtitle(str_capitalize(gsub("_"," ", x))) +
      xlab(paste("KS", percent(KS(data[[x]], data[[response]])))) + opts
  }))
  
  p
}


plotFunction <- function(data,score, marca, plot){
  
  if(plot =="KS"){
    p <- KSChart(data[[score]],data[[marca]])
  }
  
  if(plot =="ROC"){
    p <- ROCChart(data[[score]],data[[marca]])
  }
  
  if(plot =="DENSITY"){
    p <- DistChart(data[[score]],data[[marca]])
  }
  
  if(plot =="GAIN"){
    p <- GainChart(data[[score]],data[[marca]])
  }
  
  if(plot =="SMOOTH"){
    p <- SmoothChart(data[[score]],data[[marca]])
  }
  
  if(plot =="DECILE"){
    p <- BRChart(quantcut(data[[score]],seq(0,1,.1)),data[[marca]],acum = T)
  }
  
  if(plot =="QUINTILE"){
    p <- BRChart(quantcut(data[[score]],seq(0,1,.2)),data[[marca]],acum = T)
  }
  
  if(plot =="HISTOGRAM"){
    p <- Histogram(data[[score]],data[[marca]])
  }
  
  p
}

about

prueba
===========================

* Mejoras desarrolladas: 
	+ Depuración de errores
	+ Tratamiento de gráficos

##    Contacto y sugerencias:




require(car)
### Pruebas

pruebapil[is.na(pruebapil)] <- 0

pruebapil[, "GB_60_IFI"]<-recode(pruebapil[,"GB_60_IFI"],"0=1;1=0")

table(pruebapil[, "GB_60_IFI"])

pruebapil <- pruebapil[pruebapil[,"GB_60_IFI"]<=4 & pruebapil$SCORE_PIL>0,]

table(pruebapil$GB_60_IFI)

score <- pruebapil$SCORE_PIL

good.label <- pruebapil$GB_60_IFI


t1<-OddsTable_p(score ,good.label)



OddsTable_p <- function(score, good.label, min = min(score), max = max(score), cuts = NULL, 
                       nclass = 10, round = 0, quantile = T, format.2 = T){
  
  if(missing(cuts) & quantile){
    cuts <- unique(round(quantile(score, seq( 0, 1, length = nclass + 1)), digits=round))
  } 
  if(missing(cuts) & !quantile) {
    cuts <- unique(round(seq( from = min, to = max, length = nclass + 1), digits=round))
  }
  

  t <- table(cut(score, cuts, include.lowest=T), good.label)
  t <- t[(length(cuts)-1):1,]
  
  nclass <- dim(t)[1]
  N <- sum(t)
  t2 <- data.frame(class  = row.names(t),
                   n      = (t[,1]+t[,2]+t[,3]+t[,4]+t[,5]),
                   p      = round(100*(t[,1]+t[,2]+t[,3]+t[,4]+t[,5])/N,0),
                   p_acum = round(100*cumsum((t[,1]+t[,2]+t[,3]+t[,4]+t[,5])/N),0),
                   p_desacum  = round(100*(c(1,((sum(t[,1]+t[,2]+t[,3]+t[,4]+t[,5])-cumsum(t[,1]+t[,2]+t[,3]+t[,4]+t[,5]))/N)[1:(nclass-1)])),0),
                   n_bad  = t[,1],
                   p_bad  = t[,1]/sum(t[,1]),
                   p_bad_acum = cumsum(t[,1]/sum(t[,1])),
                   p_bad_desacum = c(1,((sum(t[,1])-cumsum(t[,1]))/sum(t[,1]))[1:(nclass-1)]),
                   br     = t[,1]/(t[,1]+t[,2]),
                   br_acum= cumsum(t[,1])/cumsum((t[,1]+t[,2])),
                   br_desacum = c((cumsum(t[,1])/cumsum((t[,1]+t[,2])))[nclass],((sum(t[,1])-cumsum(t[,1]))/(sum(t[,1]+t[,2])-cumsum(t[,1]+t[,2])))[1:(nclass-1)]),
                   odds   =  t[,2]/ t[,1],
                   nb_p   =  round(((t[,1]/(t[,1]+t[,2]+t[,4]))*(t[,5]+t[,3]))+t[,1],0)
                   )
  
  t2$n_bad <- t2$nb_p
  t2$p_bad <- t2$nb_p /sum(t2$nb_p)
  t2$p_bad_acum <- cumsum(t2$nb_p/sum(t2$nb_p))
  t2$p_bad_desacum <- c(1,((sum(t2$nb_p)-cumsum(t2$nb_p))/sum(t2$nb_p))[1:(nclass-1)])
  t2$br   <- t2$nb_p/t2$n
  t2$br_acum <- cumsum(t2$nb_p)/cumsum(t2$n)
  t2$br_desacum <- c((cumsum(t2$nb_p)/cumsum(t2$n))[nclass],((sum(t2$nb_p)-cumsum(t2$nb_p))/(sum(t2$n)-cumsum(t2$n)))[1:(nclass-1)])
  
  t2$odds <- (t2$n-t2$nb_p)/t2$nb_p
  
  t2$nb_p<-NULL
  
#  rownames(t2) <- NULL
  
  #min <- min(score)
  #max <- max(score)
  
  if(format.2) t2$class <- paste(c(1,cuts[2:(nclass)]+1),c(cuts[2:nclass],999), sep = "-")[nclass:1]
  
  #   list(oddstable = t2, cuts = cuts)  /names(t2)[3:5],
  
  for(var in c(names(t2)[7:(ncol(t2)-1)])){  
    t2[[var]] <- perc(t2[[var]],dec=1)
  }
  
  t2[,ncol(t2)] <- round(t2[,ncol(t2)],1)
  
  t2
  
}



OddsTable_p2 <- function(score, good.label, min = min(score), max = max(score), cuts = NULL, 
                        nclass = 10, round = 0, quantile = T, format.2 = T){
  
  if(missing(cuts) & quantile){
    cuts <- unique(round(quantile(score, seq( 0, 1, length = nclass + 1)), digits=round))
  } 
  if(missing(cuts) & !quantile) {
    cuts <- unique(round(seq( from = min, to = max, length = nclass + 1), digits=round))
  }
  
  
  t <- table(cut(score, cuts, include.lowest=T), good.label)
  t <- t[(length(cuts)-1):1,]
  
  nclass <- dim(t)[1]
  N <- sum(t)
  t2 <- data.frame(class  = row.names(t),
                   n      = (t[,1]+t[,2]+t[,3]+t[,4]+t[,5]),
                   p      = round(100*(t[,1]+t[,2]+t[,3]+t[,4]+t[,5])/N,0),
                   p_acum = round(100*cumsum((t[,1]+t[,2]+t[,3]+t[,4]+t[,5])/N),0),
                   p_desacum  = round(100*(c(1,((sum(t[,1]+t[,2]+t[,3]+t[,4]+t[,5])-cumsum(t[,1]+t[,2]+t[,3]+t[,4]+t[,5]))/N)[1:(nclass-1)])),0),
                   n_bad  = t[,1],
                   p_bad  = t[,1]/sum(t[,1]),
                   p_bad_acum = cumsum(t[,1]/sum(t[,1])),
                   p_bad_desacum = c(1,((sum(t[,1])-cumsum(t[,1]))/sum(t[,1]))[1:(nclass-1)]),
                   br     = t[,1]/(t[,1]+t[,2]),
                   br_acum= cumsum(t[,1])/cumsum((t[,1]+t[,2])),
                   br_desacum = c((cumsum(t[,1])/cumsum((t[,1]+t[,2])))[nclass],((sum(t[,1])-cumsum(t[,1]))/(sum(t[,1]+t[,2])-cumsum(t[,1]+t[,2])))[1:(nclass-1)]),
                   odds   =  t[,2]/ t[,1],
                   nb_p   =  round(((t[,1]/(t[,1]+t[,2]+t[,4]))*(t[,5]+t[,3]))+t[,1],0),
                   ng_p   =  round(((t[,2]/(t[,1]+t[,2]+t[,4]))*(t[,5]+t[,3]))+t[,2],0)
  )
  
  t2$n_bad <- t2$nb_p
  t2$p_bad <- t2$nb_p /sum(t2$nb_p)
  t2$p_bad_acum <- cumsum(t2$nb_p/sum(t2$nb_p))
  t2$p_bad_desacum <- c(1,((sum(t2$nb_p)-cumsum(t2$nb_p))/sum(t2$nb_p))[1:(nclass-1)])
  t2$br   <- t2$nb_p/t2$n
  t2$br_acum <- cumsum(t2$nb_p)/cumsum(t2$n)
  t2$br_desacum <- c((cumsum(t2$nb_p)/cumsum(t2$n))[nclass],((sum(t2$nb_p)-cumsum(t2$nb_p))/(sum(t2$n)-cumsum(t2$n)))[1:(nclass-1)])
  t2$p_good <- t2$ng_p /sum(t2$ng_p)
  t2$p_good_desacum <- c(1,((sum(t2$ng_p)-cumsum(t2$ng_p))/sum(t2$ng_p))[1:(nclass-1)])
  t2$ks <- abs(t2$p_bad_desacum - t2$p_good_desacum)
  
  t2$odds <- (t2$n-t2$nb_p)/t2$nb_p
  
  t2$nb_p<-NULL
  
  #  rownames(t2) <- NULL
  
  #min <- min(score)
  #max <- max(score)
  
  if(format.2) t2$class <- paste(c(1,cuts[2:(nclass)]+1),c(cuts[2:nclass],999), sep = "-")[nclass:1]
  
  #   list(oddstable = t2, cuts = cuts)  /names(t2)[3:5],
  
  for(var in c(names(t2)[7:(ncol(t2)-1)])){  
    t2[[var]] <- perc(t2[[var]],dec=1)
  }
  
  t2[,ncol(t2)] <- round(t2[,ncol(t2)],1)
  
  t2
  
}


SummaryScorecard_p <- function(score,good.label){ 
  
  t1<-OddsTable_p(score ,good.label)
  
  if(!is.numeric(good.label)) good.label <- as.numeric(good.label)-1
  
  res <- c(N = length(score),
           N.good = length(score[good.label == 1]),
           N.bad = length(score[good.label == 0]),
           BR = length(score[good.label == 0])/length(score),
           KS(score,good.label),
           AUCROC(score,good.label),
           Gini(score,good.label),
           #Divergence(score,good.label),
           Gain = Gain(score,good.label))
  data.frame(t(res))
}





ScoreBenchmark_p <- function(data, responses, scores, split.var = " - "){
  #   if(!missing(split.var) | split.var != "None"){  
  
  t2 <- 
  
  if(split.var != " - "){  
    bench <- 
      ldply(responses, function(response){
        ldply(scores, function(score){
          ldply(sort(as.character(unique(data[[split.var]]))), function(cat){
            daux <- data[data[[split.var]] == cat, ]
            cbind(RESPONSE = response, SCORE = score, cat, SummaryScorecard(daux[[score]],daux[[response]]))
          })
        })
      })
    
    names(bench)[3] <- split.var
    
  } else {
    bench <- 
      ldply(responses, function(response){
        ldply(scores, function(score){
          cbind(RESPONSE = response, SCORE = score, SummaryScorecard(data[[score]],data[[response]]))
        })
      })    
  }
  
  for(var in names(bench)[(ncol(bench)-8):ncol(bench)]){  
    bench[[var]] <- perc(bench[[var]])
  }
  bench
}





